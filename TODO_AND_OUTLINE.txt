 ██▀███   ▄▄▄       ██▓ ███▄    █     █     █░ ▒█████   ██▀███   ██▓    ▓█████▄     ▄████▄   ██▓     ▒█████   ███▄    █ ▓█████
▓██ ▒ ██▒▒████▄    ▓██▒ ██ ▀█   █    ▓█░ █ ░█░▒██▒  ██▒▓██ ▒ ██▒▓██▒    ▒██▀ ██▌   ▒██▀ ▀█  ▓██▒    ▒██▒  ██▒ ██ ▀█   █ ▓█   ▀
▓██ ░▄█ ▒▒██  ▀█▄  ▒██▒▓██  ▀█ ██▒   ▒█░ █ ░█ ▒██░  ██▒▓██ ░▄█ ▒▒██░    ░██   █▌   ▒▓█    ▄ ▒██░    ▒██░  ██▒▓██  ▀█ ██▒▒███
▒██▀▀█▄  ░██▄▄▄▄██ ░██░▓██▒  ▐▌██▒   ░█░ █ ░█ ▒██   ██░▒██▀▀█▄  ▒██░    ░▓█▄   ▌   ▒▓▓▄ ▄██▒▒██░    ▒██   ██░▓██▒  ▐▌██▒▒▓█  ▄
░██▓ ▒██▒ ▓█   ▓██▒░██░▒██░   ▓██░   ░░██▒██▓ ░ ████▓▒░░██▓ ▒██▒░██████▒░▒████▓    ▒ ▓███▀ ░░██████▒░ ████▓▒░▒██░   ▓██░░▒████▒
░ ▒▓ ░▒▓░ ▒▒   ▓▒█░░▓  ░ ▒░   ▒ ▒    ░ ▓░▒ ▒  ░ ▒░▒░▒░ ░ ▒▓ ░▒▓░░ ▒░▓  ░ ▒▒▓  ▒    ░ ░▒ ▒  ░░ ▒░▓  ░░ ▒░▒░▒░ ░ ▒░   ▒ ▒ ░░ ▒░ ░
  ░▒ ░ ▒░  ▒   ▒▒ ░ ▒ ░░ ░░   ░ ▒░     ▒ ░ ░    ░ ▒ ▒░   ░▒ ░ ▒░░ ░ ▒  ░ ░ ▒  ▒      ░  ▒   ░ ░ ▒  ░  ░ ▒ ▒░ ░ ░░   ░ ▒░ ░ ░  ░
  ░░   ░   ░   ▒    ▒ ░   ░   ░ ░      ░   ░  ░ ░ ░ ▒    ░░   ░   ░ ░    ░ ░  ░    ░          ░ ░   ░ ░ ░ ▒     ░   ░ ░    ░
   ░           ░  ░ ░           ░        ░        ░ ░     ░         ░  ░   ░       ░ ░          ░  ░    ░ ░           ░    ░  ░

PROJECT OUTLINES: ------------------------------------------------------------------------------------------------------

overall project outline: a 2d, physics based platformer engine comprised of two applications written in python:
                    1. the engine itself, capable of simulating 2d physics through the pymunk library, and displaying
                        graphics using pygame to handle the composition of the image and modernGL, a openGL wrapper, to
                        render and display the image. the reason for using openGL for the graphics is that it enables
                        the usage of the GPU and thus shaders. "why not render entirely with openGL?" because pygame
                        abstracts a lot of the rendering work and makes it much easier to draw things to the screen,
                        with a minimum amount of code. the engine will also handle audio and player input through
                        pygame.
                    2. a level editor for the engine. this feature has not yet been completed, but a plan is detailed in
                        the 'T0D0 LIST' section, listed under 'level editor'
    this plan should allow for the development of 2d games relatively easily.

'three layer graphics/simulation' outline: create a separation between physics and graphics; make graphics toggleable.
    the three layers:
                    1. no graphics, just simulation through pymunk.
                    2. flat-colour graphics rendered in real time from simulation data, only displaying exactly what the
                        main physics simulation is using to calculate collisions and such. this layer would be for level
                        testing and debugging.
                    3. the full art of the game; the finished product, likely pre-rendered in the level editor.
    this should allow for simulation of levels that aren't currently being viewed without a significant hit on the
    performance of the application.

T0D0 LIST: -------------------------------------------------------------------------------------------------------------

level saving: //complete
    uses JSON file format to save a dictionary of the level data. when loading, creates class instances of all of the
    objects saved in the data. see Rain world clone\see save_load_system.py

level editor: //in progress
    should be within the project, but completely separable; no dependencies on large parts of the main.py code
    ecosystem. following the outline laid out in 'three layer graphics/simulation' and the Rain World level editor, the
    editor should have three main modes:
                    1. the collision information and objects for the level; what pymunk uses for simulation.
                    2. a 'selection' mode, wherein objects can be selected and physics information, shader information,
                    and other miscellaneous values can be tweaked through the use of small autogenerated context menus.
                    3. a visual layer corresponding to the third layer of the 'three layer graphics/simulation' outline.
    as well as support for smaller sub-modes. all of the collision and physics information should be saved to a
    'level'.json file, where 'level' is the level being edited. the visual layer (#3) will be rendered in the level
    editor, and then saved as an image file beside the JSON file. the files will be read separately into the game
    engine, allowing for the toggling of graphics discussed in 'three layer graphics/simulation'. the level editor
    should allow for exporting of only the JSON physics and collisions data, without taking more time to export
    graphics, to allow for quick iterative testing of mechanics and level design.

more robust dev tools

creatures with procedural animation and intelligent pathfinding compatible with levels:
    a la Rain World. see tigsource Project Rain World devlogs for more information.

BUGS: ------------------------------------------------------------------------------------------------------------------

fix CRT/Sine shader interaction:
    ISSUE: currently, the sine wave shader warps the CRT shader effect.
    INTENDED BEHAVIOUR: the sine wave shader should be applied inside the display shape the CRT shader creates, and not
        affect the border of the CRT display shape.

reuse textures for modernGL rendering:
    ISSUE: two new openGL textures are created each frame, passed through shaders, displayed, and then discarded. this
        takes more processing power than is necessary.
    INTENDED BEHAVIOUR: create two openGL textures at the start of the program, and then reuse them every frame instead.











           )
         ( _   _._
          |_|-'_~_`-._
       _.-'-_~_-~_-~-_`-._
   _.-'_~-_~-_-~-_~_~-_~-_`-._
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    |  []  []   []   []  [] |
    |           __    ___   |
  ._|  []  []  | .|  [___]  |_._._._._._._._._._._._._._._._._.
  |=|________()|__|()_______|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|
^^^^^^^^^^^^^^^ === ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TEMPORARY CODE STORAGE: ------------------------------------------------------------------------------------------------

save_load_system.save_object('testRoom', 'Ball', [111, -123, 12])
save_load_system.save_object('testRoom', 'Ball', [340, 123, 12])
save_load_system.save_object('testRoom', 'Ball', [222, 123, 30])
save_load_system.save_object('testRoom', 'Ball', [222, 123, 20])
save_load_system.save_object('testRoom', 'Ball', [222, 123, 40])
save_load_system.save_object('testRoom', 'Wall', [(0, 340), (400, 360), (0, 400), (400, 400)])
save_load_system.save_object('testRoom', 'Wall', [(350, -400), (400, -400), (395, 400), (400, 400)])
save_load_system.save_object('testRoom', 'Wall', [(0, -400), (25, -400), (0, 400), (25, 400)])
save_load_system.save_object('testRoom', 'Wall', [(200, 300), (125, 400), (125, 400), (350, 400)])
save_load_system.save_object('testRoom', 'Wall', [(0, -400), (0, -380), (400, -400), (400, -380)])
