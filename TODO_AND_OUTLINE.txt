 ██▀███   ▄▄▄       ██▓ ███▄    █     █     █░ ▒█████   ██▀███   ██▓    ▓█████▄     ▄████▄   ██▓     ▒█████   ███▄    █ ▓█████
▓██ ▒ ██▒▒████▄    ▓██▒ ██ ▀█   █    ▓█░ █ ░█░▒██▒  ██▒▓██ ▒ ██▒▓██▒    ▒██▀ ██▌   ▒██▀ ▀█  ▓██▒    ▒██▒  ██▒ ██ ▀█   █ ▓█   ▀
▓██ ░▄█ ▒▒██  ▀█▄  ▒██▒▓██  ▀█ ██▒   ▒█░ █ ░█ ▒██░  ██▒▓██ ░▄█ ▒▒██░    ░██   █▌   ▒▓█    ▄ ▒██░    ▒██░  ██▒▓██  ▀█ ██▒▒███
▒██▀▀█▄  ░██▄▄▄▄██ ░██░▓██▒  ▐▌██▒   ░█░ █ ░█ ▒██   ██░▒██▀▀█▄  ▒██░    ░▓█▄   ▌   ▒▓▓▄ ▄██▒▒██░    ▒██   ██░▓██▒  ▐▌██▒▒▓█  ▄
░██▓ ▒██▒ ▓█   ▓██▒░██░▒██░   ▓██░   ░░██▒██▓ ░ ████▓▒░░██▓ ▒██▒░██████▒░▒████▓    ▒ ▓███▀ ░░██████▒░ ████▓▒░▒██░   ▓██░░▒████▒
░ ▒▓ ░▒▓░ ▒▒   ▓▒█░░▓  ░ ▒░   ▒ ▒    ░ ▓░▒ ▒  ░ ▒░▒░▒░ ░ ▒▓ ░▒▓░░ ▒░▓  ░ ▒▒▓  ▒    ░ ░▒ ▒  ░░ ▒░▓  ░░ ▒░▒░▒░ ░ ▒░   ▒ ▒ ░░ ▒░ ░
  ░▒ ░ ▒░  ▒   ▒▒ ░ ▒ ░░ ░░   ░ ▒░     ▒ ░ ░    ░ ▒ ▒░   ░▒ ░ ▒░░ ░ ▒  ░ ░ ▒  ▒      ░  ▒   ░ ░ ▒  ░  ░ ▒ ▒░ ░ ░░   ░ ▒░ ░ ░  ░
  ░░   ░   ░   ▒    ▒ ░   ░   ░ ░      ░   ░  ░ ░ ░ ▒    ░░   ░   ░ ░    ░ ░  ░    ░          ░ ░   ░ ░ ░ ▒     ░   ░ ░    ░
   ░           ░  ░ ░           ░        ░        ░ ░     ░         ░  ░   ░       ░ ░          ░  ░    ░ ░           ░    ░  ░

PROJECT OUTLINES: ------------------------------------------------------------------------------------------------------

overall project outline: a 2d, physics based platformer engine comprised of two applications written in python:
                    1. the engine itself, capable of simulating 2d physics through the pymunk library, and displaying
                        graphics using pygame to handle the composition of the image and modernGL, a openGL wrapper, to
                        render and display the image. the reason for using openGL for the graphics is that it enables
                        the usage of the GPU and thus shaders. "why not render entirely with openGL?" because pygame
                        abstracts a lot of the rendering work and makes it much easier to draw things to the screen,
                        with a minimum amount of code. the engine will also handle audio and player input through
                        pygame.
                    2. a level editor for the engine. this feature has not yet been completed, but a plan is detailed in
                        the 'T0D0 LIST' section, listed under 'level editor'
    this plan should allow for the development of 2d games relatively easily.

'three layer graphics/simulation' outline: create a separation between physics and graphics; make graphics toggleable.
    the three layers:
                    1. no graphics, just simulation through pymunk.
                    2. flat-colour graphics rendered in real time from simulation data, only displaying exactly what the
                        main physics simulation is using to calculate collisions and such. this layer would be for level
                        testing and debugging.
                    3. the full art of the game; the finished product, likely pre-rendered in the level editor.
    this should allow for simulation of levels that aren't currently being viewed without a significant hit on the
    performance of the application.

level editor Collisions/Object Placement mode controls outline:
    control  ->  planned usage:
                    lmb             ->      panning, if not clicking on an object; moving an object/resizing it. [DONE]
                    rmb             ->      brings up the object in Selection and Editing mode.
                    rmb + del or d  ->      erase an object. [DONE]
                    rmb + c         ->      copy an object. [DONE]
                    rmb + x         ->      cut(erase and copy) an object. [DONE]
                    rmb + v         ->      paste an object. [DONE]
                    scroll wheel    ->      zoom in/out [NOT HAPPENING]
    every time a new object is created, the level saves to JSON and is reloaded, but this is not the case for object
    deletion or object movement, as a sort of rudimentary back button.

level editor Selection and Editing mode controls outline:
    controls should be able to bring up windows to edit all the properties of a specific object
    control  ->  planned usage:
                    lmb             ->      open new window with controls to edit the clicked object's attributes, and
                                                an option to save. [DONE]
                    mmb             ->      switch back to Collisions/Object Placement mode. [DONE]
    unless further uses are given to this mode, it might be a good idea to combine it with Collisions/Object Placement
    mode.


T0D0 LIST: -------------------------------------------------------------------------------------------------------------

level saving:                                                                                                 //complete
    uses JSON file format to save a dictionary of the level data. when loading, creates class instances of all of the
    objects saved in the data. see Rain world clone\see save_load_system.py

level editor:                                                                                                 //complete
    should be within the project, but completely separable; no dependencies on large parts of the main.py code
    ecosystem. following the outline laid out in 'three layer graphics/simulation' and the Rain World level editor, the
    editor should have three main modes(contd. below):

                    1. the collision information and objects for the level; what pymunk uses for simulation. see level
                        editor collision mode controls outline for controls.                                  //complete

                    2. a 'selection' mode, wherein objects can be selected and physics information, shader information,
                        and other miscellaneous values can be tweaked through the use of small autogenerated context
                        menus.                                                                                //complete

                    3. a visual layer corresponding to the third layer of the 'three layer graphics/simulation' outline.
                                                                                      //will be done on a per-game basis

    as well as support for smaller sub-modes. all of the collision and physics information should be saved to a
    'level'.json file, where 'level' is the level being edited. the visual layer (#3) will be rendered in the level
    editor, and then saved as an image file beside the JSON file. the files will be read separately into the game
    engine, allowing for the toggling of graphics discussed in 'three layer graphics/simulation'. the level editor
    should allow for exporting of only the JSON physics and collisions data, without taking more time to export
    graphics, to allow for quick iterative testing of mechanics and level design.

more robust dev tools

creatures with procedural animation and intelligent pathfinding compatible with levels:                    //in progress
    a la Rain World. see tigsource Project Rain World devlogs for more information.

BUGS: ------------------------------------------------------------------------------------------------------------------

fix CRT/Sine shader interaction:
    ISSUE: currently, the sine wave shader warps the CRT shader effect.
    INTENDED BEHAVIOUR: the sine wave shader should be applied inside the display shape the CRT shader creates, and not
        affect the border of the CRT display shape.

create way to save string objects in JSON:
    ISSUE: string objects need to contain references to other objects in file, currently not supported.
    INTENDED BEHAVIOUR: strings can be saved in JSON with references to other objects, and then behave properly when
        loaded.

reuse textures for modernGL rendering:
    ISSUE: two new openGL textures are created each frame, passed through shaders, displayed, and then discarded. this
        takes more processing power than is necessary.
    INTENDED BEHAVIOUR: create two openGL textures at the start of the program, and then reuse them every frame instead.

make light radius not depend on screen size:
    ISSUE: light radius is affected by the size of the screen.
    INTENDED BEHAVIOUR: light radius should be independent of screen size.

LE SPECIFIC -- make polygon shapes able to be edited, then moved, without resetting shape:
    ISSUE: if the vertices of a polygon are changed in the level editor, the JSON needs to be saved and reloaded before
        moving that polygon, otherwise the vertices reset to how they were before the change.
    INTENDED BEHAVIOUR: if the vertices of a polygon are changed in the level editor, it should be able to be moved
        without changes to the vertices.











           )
         ( _   _._
          |_|-'_~_`-._
       _.-'-_~_-~_-~-_`-._
   _.-'_~-_~-_-~-_~_~-_~-_`-._
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    |  []  []   []   []  [] |
    |           __    ___   |
  ._|  []  []  | .|  [___]  |_._._._._._._._._._._._._._._._._.
  |=|________()|__|()_______|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|
^^^^^^^^^^^^^^^ === ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TEMPORARY CODE STORAGE: ------------------------------------------------------------------------------------------------

save_load_system.save_object('testRoom', 'Ball', [111, -123, 12])
save_load_system.save_object('testRoom', 'Ball', [340, 123, 12])
save_load_system.save_object('testRoom', 'Ball', [222, 123, 30])
save_load_system.save_object('testRoom', 'Ball', [222, 123, 20])
save_load_system.save_object('testRoom', 'Ball', [222, 123, 40])
save_load_system.save_object('testRoom', 'Wall', [(0, 340), (400, 360), (0, 400), (400, 400)])
save_load_system.save_object('testRoom', 'Wall', [(350, -400), (400, -400), (395, 400), (400, 400)])
save_load_system.save_object('testRoom', 'Wall', [(0, -400), (25, -400), (0, 400), (25, 400)])
save_load_system.save_object('testRoom', 'Wall', [(200, 300), (125, 400), (125, 400), (350, 400)])
save_load_system.save_object('testRoom', 'Wall', [(0, -400), (0, -380), (400, -400), (400, -380)])
